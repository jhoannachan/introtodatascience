# Original location: http://www.codeskulptor.org/#user47_NQnDk9BXP3_6.py

# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [1, -1]
paddle1_pos = HEIGHT / 2 - HALF_PAD_HEIGHT
paddle2_pos = HEIGHT / 2 - HALF_PAD_HEIGHT
paddle1_vel = 0
paddle2_vel = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    """ Define direction of ball movement."""    
    if direction == RIGHT:
        ball_vel[0] = random.randrange(120, 240) / 60.0 # should be in pixels per second. Given figures divided by 60.
        ball_vel[1] = random.randrange(-180, -60) / 60.0
    elif direction == LEFT:
        ball_vel[0] = random.randrange(-240, -120) / 60.0
        ball_vel[1] = random.randrange(-180, -60) / 60.0
   
""" define event handlers""" 
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(RIGHT)
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global paddle1_vel, paddle2_vel
    """ Draw ball"""
    canvas.draw_circle(ball_pos, BALL_RADIUS, 10, "Yellow", "Yellow")
    
    """ Ball moves immediately after game is launched."""
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    """ Mid line and gutters"""
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    """ Update ball."""
    """ If ball reaches vertical limits of canvas (0, HEIGHT), it bounces back."""
    if ball_pos[1] - BALL_RADIUS <= 0:
        ball_vel[1] = -(ball_vel[1])
    elif ball_pos[1] + BALL_RADIUS >= HEIGHT:
        ball_vel[1] = -(ball_vel[1])
    
    """ If ball reaches the side gutters, 
    it causes ball to spawn and move towards opposite gutter.
    If ball touches paddle, then ball moves in opposite direction."""
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if paddle1_pos <= ball_pos[1] <= (paddle1_pos + PAD_HEIGHT):
            ball_vel[0] = -(ball_vel[0])
            ball_vel[0] = ball_vel[0] * 1.1
            ball_vel[1] = ball_vel[1] * 1.1
        else: 
            spawn_ball(RIGHT)
            score2 += 1
    if ball_pos[0] >= (WIDTH - PAD_WIDTH) - BALL_RADIUS:
        if paddle2_pos <= ball_pos[1] <= (paddle2_pos + PAD_HEIGHT):
            ball_vel[0] = -(ball_vel[0])
            ball_vel[0] = ball_vel[0] * 1.1
            ball_vel[1] = ball_vel[1] * 1.1
        else:
            spawn_ball(LEFT)
            score1 += 1
            
    """ Draw paddles"""
    paddle1 = canvas.draw_polygon([(0, paddle1_pos + PAD_HEIGHT),(0, paddle1_pos),(PAD_WIDTH, paddle1_pos),(PAD_WIDTH, paddle1_pos + PAD_HEIGHT)], 1, 'White', 'White')
    paddle2 = canvas.draw_polygon([(WIDTH - PAD_WIDTH, paddle2_pos + PAD_HEIGHT),(WIDTH - PAD_WIDTH, paddle2_pos),(WIDTH, paddle2_pos),(WIDTH, paddle2_pos + PAD_HEIGHT)], 1, 'White', 'White')

    """ Update paddle's vertical position, keep paddle on the screen."""
    """ Paddle 1 control""" 
    if not paddle1_pos + paddle1_vel <= 0:
        paddle1_pos += paddle1_vel
    else:
        paddle1_pos -= paddle1_vel
    if not (paddle1_pos + PAD_HEIGHT + paddle1_vel) >= HEIGHT: 
        paddle1_pos += paddle1_vel
    else:
        paddle1_pos -= paddle1_vel
    """ Paddle 2 control"""     
    if not paddle2_pos + paddle2_vel <= 0:
        paddle2_pos += paddle2_vel
    else:
        paddle2_pos -= paddle2_vel
    if not (paddle2_pos + PAD_HEIGHT + paddle2_vel) >= HEIGHT: 
        paddle2_pos += paddle2_vel
    else:
        paddle2_pos -= paddle2_vel 
    
    # draw scores
    canvas.draw_text(str(score1),[150,100],40,'Blue')
    canvas.draw_text(str(score2),[450,100],40,'Red')    
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 1
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= acc 
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel += acc 
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= acc 
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel += acc 
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('Restart game', new_game)

# start frame
new_game()
frame.start()
